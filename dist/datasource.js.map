{"version":3,"sources":["../src/datasource.js"],"names":["_","filter","ScrutinizerJSON","Handledata","AdhocHandler","reportTypes","reportDirection","displayOptions","filterTypes","granularityOptions","resolveDNS","makescrutJSON","dataHandler","adhocHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","exporterList","others","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","map","filterObject","createObject","Promise","resolve","reject","exporterCount","numberofExporters","forEach","includes","adhocParams","findExporter","doRequest","then","exporterIpFound","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","interfaceList","interfaceDetails","exporterDetails","push","exporterName","exporterIp","interfaceName","interfaceId","chosenGroup","individualGroup","groupName","groupId","toString","interfaceID","exporterInterface","filterDrag","searchStr","singleQuery","index","array","createAdhocFilters","scrutParams","createParams","params","findtimeJSON","graphGranularity","response","graphView","seconds","merged","scrutFilters","reportJSON","formatedData","formatData","noOthers","hideOthers","concat","apply","target","undefined","reportInterface","reportType","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","text","interfaceThings","rows","label","refresh","exporterJSON","datasourceRequest","replace","scopedVars","refId","report","direction","interface","reportFilters","reportDisplay","display","reportGranularity","granularity","reportDNS","dns","key","exporterParams","interfaces","exporterResults","k","exporterToSearch","interfacesToSearch","interfaceJson","presentOptions","HandleAdhocFilters"],"mappings":"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","file":"datasource.js","sourcesContent":["import _, { filter } from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata, AdhocHandler } from \"./reportData\";\r\nimport {\r\n  reportTypes,\r\n  reportDirection,\r\n  displayOptions,\r\n  filterTypes,\r\n  granularityOptions,\r\n  resolveDNS\r\n} from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\nlet adhocHandler = new AdhocHandler();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.granularityOptions = granularityOptions;\r\n    this.displayOptions = displayOptions;\r\n    this.resolveDNS = resolveDNS;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n    this.filterTypes = filterTypes;\r\n\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.exporterList = this.exporterList();\r\n\r\n    this.others = false\r\n  }\r\n\r\n  query(options) {\r\n\r\n    \r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n    //data sent up into this list, it's returned at end.\r\n    let datatoGraph = [];\r\n    //only run a report if all options are populated, only matter when there are not adhoc filters.\r\n    this.runReport = false;\r\n    //takes the query and stores it to a variable\r\n    var query = this.buildQueryParameters(options);\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n    //add adhoc filters to the query.\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n \r\n    let checkStart = query.targets.length - 1;\r\n    //counter is used to keep track of number of exporters. This matters for creating the filter ojects\r\n    let filterTypes = this.filterTypes.map(filter => filter[\"text\"]);\r\n\r\n    let filterObject = adhocHandler.createObject(query, filterTypes, this.filterTypes)\r\n\r\n    query.resolveDNS = null\r\n    return new Promise((resolve, reject) => {\r\n\r\n      //this exporter count is compared to the number of exporters to verify we have loops threw everything before returning.\r\n      let exporterCount = 0;\r\n      let numberofExporters = 0;\r\n\r\n      //all the ability to toggle DNS resolve for Adhoc Filters. \r\n      if(filterObject.resolve !== null) {\r\n        query['resolveDNS'] = filterObject.resolve\r\n      }\r\n\r\n\r\n\r\n      if (query.adhocFilters.length > 0) {\r\n\r\n        query.adhocFilters.forEach(filter => {\r\n\r\n\r\n          //if there is an exporter passed in the adhoc filter\r\n          if (\r\n            filterObject.exporters.length > 0 &&\r\n            !filterTypes.includes(filter[\"key\"])\r\n          ) {\r\n           \r\n           \r\n            numberofExporters++;\r\n\r\n            //in some cases we will be passed the DNS/SNMP name of an exporter, here we convert it to an IP address needed for final filter.\r\n\r\n            let adhocParams = makescrutJSON.findExporter(\r\n              this.scrutInfo,\r\n              filter[\"key\"]\r\n            );\r\n            \r\n            this.doRequest(adhocParams).then(exporter_details => {\r\n             \r\n         \r\n              let exporterIpFound\r\n\r\n              if (exporter_details.data.results.length >0){\r\n                exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n              } else if (filter['key'] === \"All Exporters\"){\r\n                exporterIpFound = \"GROUP\"\r\n              }else if (filter['key'] === \"Device Group\") {\r\n                exporterIpFound = filter\r\n              }\r\n             \r\n\r\n  \r\n              //need to find the interface ID for the interface passed to Scrutinizer.\r\n              let interfaceParams = makescrutJSON.interfaceJSON(\r\n                this.scrutInfo,\r\n                exporterIpFound\r\n              );\r\n\r\n              this.doRequest(interfaceParams).then(interfaceDetails => {\r\n  \r\n                \r\n                let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n               \r\n\r\n                //for each interface that belongs to a device, we want to compare it against the one selected in grafana. If it matched we can add it to the filters\r\n        \r\n                 if (filter[\"value\"] === \"All Interfaces\") {\r\n                  filterObject.exporterDetails.push({\r\n                    exporterName: filter[\"key\"],\r\n                    exporterIp: exporterIpFound,\r\n                    interfaceName: filter[\"value\"],\r\n                    interfaceId: \"ALL\"\r\n                  });\r\n                } else if(filter[\"key\"] === \"Device Group\"){\r\n\r\n                  let chosenGroup = filter['value']\r\n\r\n                  interfaceList.forEach((individualGroup)=>{\r\n                    let groupName = individualGroup[3]['label']\r\n                    let groupId = individualGroup[8]['id']\r\n                    if(chosenGroup === groupName) {\r\n                      filterObject.exporterDetails.push({\r\n                        exporterName: filter[\"key\"],\r\n                        exporterIp: \"GROUP\",\r\n                        interfaceName: filter[\"value\"],\r\n                        interfaceId: groupId.toString()\r\n                      })\r\n                    }\r\n                  })\r\n                    \r\n   \r\n                }\r\n                else{\r\n        \r\n                  interfaceList.forEach(exporterInterface => {\r\n                    let interfaceID = exporterInterface[5].filterDrag.searchStr;\r\n                    let interfaceName = exporterInterface[5][\"label\"];\r\n\r\n                    //if selected interface matches and interface in the list, add it to object\r\n                    if (filter[\"value\"] === interfaceName) {\r\n                      filterObject.exporterDetails.push({\r\n                        exporterName: filter[\"key\"],\r\n                        exporterIp: exporterIpFound,\r\n                        interfaceName: filter[\"value\"],\r\n                        interfaceId: interfaceID\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n\r\n                exporterCount++;\r\n                //we have now looped through all the exporters in the filters.\r\n                if (exporterCount === numberofExporters) {\r\n\r\n                  query.targets.forEach((singleQuery, index, array) => {\r\n\r\n                    this.filters = makescrutJSON.createAdhocFilters(filterObject);\r\n               \r\n                    let scrutParams = makescrutJSON.createParams(\r\n                      this.scrutInfo,\r\n                      options,\r\n                      singleQuery,\r\n                      this.filters\r\n                    );\r\n\r\n                    //figure out the intervale time.\r\n                    let params = makescrutJSON.findtimeJSON(\r\n                      this.scrutInfo,\r\n                      scrutParams,\r\n                      singleQuery, \r\n                      filterObject\r\n                    );\r\n                    this.doRequest(params).then(response => {\r\n                     \r\n                      //store interval here.\r\n\r\n                      let graphGranularity =\r\n                        response.data[\"report_object\"].graphView.graphGranularity.seconds;        \r\n                      \r\n      \r\n                      //set up JSON to go to Scrutinizer API\r\n                     \r\n\r\n                      //add adhoc filters to exhisting filters.\r\n               \r\n                      let merged = {\r\n                        ...this.filters,\r\n                        ...scrutParams[\"scrutFilters\"]\r\n                      };\r\n       \r\n                      scrutParams.scrutFilters = merged;\r\n                      let params = makescrutJSON.reportJSON(\r\n                        this.scrutInfo,\r\n                        scrutParams,\r\n                        filterObject\r\n                      );\r\n                      this.doRequest(params).then(response => {\r\n                        let formatedData = dataHandler.formatData(\r\n                          response.data,\r\n                          scrutParams,\r\n                          graphGranularity,\r\n                          singleQuery,\r\n                          query\r\n                        );\r\n                        \r\n                        let noOthers;\r\n                       \r\n                        // this will override individual gadgets, assumes that adhoc filter is set for show others. \r\n                        if (filterObject.others === true) {\r\n                          singleQuery.hideOthers = false\r\n                        } else if (filterObject.others === false) {\r\n                          singleQuery.hideOthers = true\r\n                        }\r\n      \r\n      \r\n                        //This is done on the individual gadget level, it assumes no adhoc filter for show others was passed. \r\n                        if (singleQuery.hideOthers) {\r\n                          noOthers = formatedData.filter((data)=>{\r\n                            return data['target'] != 'Other'\r\n                              })\r\n                          datatoGraph.push(noOthers);\r\n                        } else {\r\n                          datatoGraph.push(formatedData);\r\n                        }\r\n                        datatoGraph = [].concat.apply([], datatoGraph);\r\n      \r\n                        numberOfQueries++;\r\n                        //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                        if (numberOfQueries === array.length) {\r\n      \r\n                          return resolve({ data: datatoGraph });\r\n                        }\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n          }\r\n          //if there is not an exporter or Group passed in the filter.\r\n          else if (filterObject.exporters.length === 0) {\r\n\r\n            query.targets.forEach((singleQuery, index, array) => {\r\n \r\n              let scrutParams = makescrutJSON.createParams(\r\n                this.scrutInfo,\r\n                options,\r\n                singleQuery\r\n              );\r\n              //figure out the intervale time.\r\n              let params = makescrutJSON.findtimeJSON(\r\n                this.scrutInfo,\r\n                scrutParams,\r\n                singleQuery, \r\n                filterObject\r\n              );\r\n              this.doRequest(params).then(response => {\r\n               \r\n                //store interval here.\r\n               \r\n                let graphGranularity =\r\n                  response.data[\"report_object\"].graphView.graphGranularity.seconds;        \r\n                \r\n\r\n                //set up JSON to go to Scrutinizer API\r\n                this.filters = makescrutJSON.createAdhocFilters(filterObject);\r\n                //add adhoc filters to exhisting filters.\r\n                let merged = {\r\n                  ...this.filters,\r\n                  ...scrutParams[\"scrutFilters\"]\r\n                };\r\n                \r\n                scrutParams.scrutFilters = merged;\r\n                let params = makescrutJSON.reportJSON(\r\n                  this.scrutInfo,\r\n                  scrutParams,\r\n                  filterObject\r\n                );\r\n                this.doRequest(params).then(response => {\r\n                  let formatedData = dataHandler.formatData(\r\n                    response.data,\r\n                    scrutParams,\r\n                    graphGranularity,\r\n                    singleQuery,\r\n                    query\r\n                  );\r\n                  \r\n                  let noOthers;\r\n                 \r\n                  // this will override individual gadgets, assumes that adhoc filter is set for show others. \r\n                  if (filterObject.others === true) {\r\n                    singleQuery.hideOthers = false\r\n                  } else if (filterObject.others === false) {\r\n                    singleQuery.hideOthers = true\r\n                  }\r\n\r\n\r\n                  //This is done on the individual gadget level, it assumes no adhoc filter for show others was passed. \r\n                  if (singleQuery.hideOthers) {\r\n                    noOthers = formatedData.filter((data)=>{\r\n                      return data['target'] != 'Other'\r\n                        })\r\n                    datatoGraph.push(noOthers);\r\n                  } else {\r\n                    datatoGraph.push(formatedData);\r\n                  }\r\n                  datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                  numberOfQueries++;\r\n                  //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                  if (numberOfQueries === array.length) {\r\n\r\n                    return resolve({ data: datatoGraph });\r\n                  }\r\n                });\r\n              });\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        //else block meands you don't have any adhoc filters applied.\r\n        if (\r\n          (query.targets[checkStart].target !== undefined ||\r\n            \"Select Exporter\") &&\r\n          query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n          query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n          query.targets[checkStart].reportType !== \"Select Report\"\r\n        ) {\r\n          this.runReport = true;\r\n        }\r\n\r\n        //once all drop downs are selected, run the report.\r\n        if (this.runReport == true) {\r\n\r\n          query.targets.forEach((query, index, array) => {\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.scrutInfo,\r\n              options,\r\n              query\r\n            );\r\n            //figure out the intervale time.\r\n            let params = makescrutJSON.findtimeJSON(\r\n              this.scrutInfo,\r\n              scrutParams,\r\n              query\r\n            );\r\n\r\n            this.doRequest(params).then(response => {\r\n              \r\n\r\n              let graphGranularity =\r\n                response.data[\"report_object\"].graphView.graphGranularity.seconds;        \r\n\r\n       \r\n              //set up JSON to go to Scrutinizer API\r\n              let params = makescrutJSON.reportJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  graphGranularity,\r\n                  query,\r\n                  \r\n                );\r\n     \r\n\r\n                let noOthers;\r\n\r\n                //add ability to filter out other traffic if desired. \r\n                if (query.hideOthers) {\r\n                  noOthers = formatedData.filter((data)=>{\r\n                    return data['target'] != 'Other'\r\n                      })\r\n                  datatoGraph.push(noOthers);\r\n                } else {\r\n                  datatoGraph.push(formatedData);\r\n                }\r\n                \r\n         \r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n                \r\n                numberOfQueries++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (numberOfQueries === array.length) {\r\n\r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  showOtherTraffic(){\r\n\r\n    this.others = !this.others\r\n\r\n\r\n  }\r\n\r\n  testDatasource() {\r\n\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n\r\n \r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets) {\r\n  \r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.scrutInfo[\"url\"],\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        \r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n       \r\n \r\n        return this.doRequest(interfaceThings).then(response => {\r\n\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),        \r\n        \r\n        reportGranularity: this.templateSrv.replace(\r\n          target.granularity || \"Select Granularity\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDNS: target.dns,\r\n        hideOthers:target.hideOthers\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  //used to figure out which interfaces to show for a paritcular exporter.\r\n  HandleAdhocFilters(resolve, options) {\r\n\r\n    if (options.key !=\"Device Group\" ){\r\n \r\n      let exporterParams = makescrutJSON.findExporter(\r\n        this.scrutInfo,\r\n        options.key\r\n      );\r\n      let interfaces = [{ text: \"All Interfaces\" }];\r\n\r\n      this.doRequest(exporterParams).then(exporterResults => {\r\n        let exporterIp = exporterResults[\"data\"][\"results\"][0][\"exporter_ip\"];\r\n        let interfaceParams = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          exporterIp\r\n        );\r\n\r\n        this.doRequest(interfaceParams).then(interfaceDetails => {\r\n          let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n          for (let k = 0; k < interfaceList.length; k++) {\r\n            let interfaceName = interfaceList[k][5][\"label\"];\r\n            interfaces.push({\r\n              text: interfaceName\r\n            });\r\n          }\r\n          return resolve(interfaces);\r\n        });\r\n      });\r\n    \r\n    }\r\n    else {\r\n      let params = makescrutJSON.groupJSON(\r\n        this.scrutInfo['url'],\r\n        this.scrutInfo[\"authToken\"]\r\n      );\r\n\r\n     //if user selects Device Group we return a list of all groups available.\r\n      this.doRequest(params).then(response => {\r\n        let i = 0;\r\n\r\n        let jsonData = response.data;\r\n        let data = [];\r\n        for (i = 0; i < jsonData.length; i++) {\r\n          data.push({\r\n            value: jsonData[i][\"id\"].toString(),\r\n            text: jsonData[i][\"name\"]\r\n          });\r\n        }\r\n\r\n        return resolve(data);\r\n    })}\r\n    \r\n  }\r\n\r\n  addInterfaces(exporterName) {\r\n    //if key is exporter there is no AND, we know we are looking for interfaces on that exporter.\r\n    let interfaces = [];\r\n    let exporterToSearch = exporterName;\r\n    let adhocParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      exporterToSearch\r\n    );\r\n    this.doRequest(adhocParams).then(exporter_details => {\r\n      let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n      let interfacesToSearch = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIpFound\r\n      );\r\n      this.doRequest(interfacesToSearch).then(interfaceDetails => {\r\n        let i = 0;\r\n        let interfaceJson = interfaceDetails.data;\r\n\r\n        if (interfaces.length > 0) {\r\n          interfaces = [];\r\n        }\r\n        for (i = 0; i < interfaceJson.rows.length; i++) {\r\n          //add interfaces to the interface filter options\r\n          interfaces.push(interfaceJson.rows[i][5].label);\r\n        }\r\n\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n  presentOptions(resolve) {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\" },\r\n        { text: \"Device Group\" },\r\n        { text: \"Source IP Filter\" },\r\n        { text: \"Add Port Filter\" },\r\n        { text: \"Destination IP Filter\" },\r\n        { text:\"Show Others\"},\r\n        { text:\"Select Granularity\"},\r\n        { text:\"Resolve DNS\"}\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return resolve(exporterList);\r\n    });\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.presentOptions(resolve);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n\r\n\r\n\r\n    switch (options.key) {\r\n      case \"Source IP Filter\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve();\r\n        });\r\n      case \"Destination IP Filter\":\r\n            return new Promise((resolve, reject) => {\r\n              resolve();\r\n            });\r\n      case \"Add Port Filter\":\r\n            return new Promise((resolve, reject) => {\r\n              resolve();\r\n            });\r\n      case \"All Exporters\":\r\n          return new Promise((resolve, reject) => {\r\n            resolve([{'text':'All Interfaces',\r\n                      'value':'All Interfaces'}]);\r\n          });\r\n      case \"Show Others\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve([{'text':'Yes',\r\n                    'value':true},\r\n                    {'text':'No',\r\n                    'value':false}]);\r\n        });        \r\n\r\n        case \"Select Granularity\":\r\n          return new Promise((resolve, reject) => {\r\n            resolve(this.granularityOptions);\r\n          });\r\n          \r\n        case \"Resolve DNS\":\r\n            return new Promise((resolve, reject) => {\r\n              resolve(this.resolveDNS);\r\n            });   \r\n      default:\r\n        return new Promise((resolve, reject) => {\r\n          this.HandleAdhocFilters(resolve, options);\r\n        });\r\n    }\r\n  }\r\n}\r\n"]}
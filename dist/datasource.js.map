{"version":3,"sources":["../src/datasource.js"],"names":["_","ScrutinizerJSON","Handledata","reportTypes","reportDirection","displayOptions","filterTypes","makescrutJSON","dataHandler","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","name","q","reportOptions","reportDirections","withCredentials","liveQuery","headers","basicAuth","length","runReport","exporters","filters","scrutInfo","url","authToken","jsonData","exporterList","options","numberOfQueries","datatoGraph","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","checkStart","map","filterObject","sourceIp","exporterDetails","ports","destIp","forEach","includes","push","filterType","filterKey","filterValue","Promise","resolve","reject","exporterCount","numberofExporters","adhocParams","findExporter","doRequest","then","exporterIpFound","exporter_details","results","exporter_ip","interfaceParams","interfaceJSON","interfaceList","interfaceDetails","exporterName","exporterIp","interfaceName","interfaceId","toString","interfaceID","exporterInterface","filterDrag","searchStr","reportFilter","createAdhocFilters","scrutParams","createFilters","eachQuery","params","findtimeJSON","selectedInterval","response","dataGranularity","used","reportJSON","formatedData","formatData","concat","apply","index","array","createParams","merged","scrutFilters","target","undefined","reportInterface","reportType","console","log","authJson","status","details","message","err","title","scope","selectedIP","ctrl","groupJSON","i","value","text","interfaceThings","rows","label","refresh","exporterJSON","datasourceRequest","replace","scopedVars","refId","report","direction","interface","reportFilters","reportDisplay","display","reportDNS","dns","key","exporterParams","interfaces","exporterResults","k","exporterToSearch","interfacesToSearch","interfaceJson","presentOptions","HandleAdhocFilters"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\nimport { ScrutinizerJSON, Handledata } from \"./reportData\";\r\nimport {\r\n  reportTypes,\r\n  reportDirection,\r\n  displayOptions,\r\n  filterTypes\r\n} from \"./reportTypes\";\r\n\r\nlet makescrutJSON = new ScrutinizerJSON();\r\nlet dataHandler = new Handledata();\r\n\r\nexport class GenericDatasource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n    this.reportOptions = reportTypes;\r\n    this.reportDirections = reportDirection;\r\n    this.displayOptions = displayOptions;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.liveQuery = \"\";\r\n    this.headers = { \"Content-Type\": \"application/json\" };\r\n    if (\r\n      typeof instanceSettings.basicAuth === \"string\" &&\r\n      instanceSettings.basicAuth.length > 0\r\n    ) {\r\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\r\n    }\r\n    this.runReport = false;\r\n\r\n    this.exporters = [];\r\n    this.filterTypes = filterTypes;\r\n\r\n    this.filters = \"\";\r\n\r\n    this.scrutInfo = {\r\n      url: instanceSettings.url + \"/fcgi/scrut_fcgi.fcgi\",\r\n      authToken: instanceSettings.jsonData[\"scrutinizerKey\"]\r\n    };\r\n    this.exporterList = this.exporterList();\r\n  }\r\n\r\n  query(options) {\r\n    \r\n\r\n    //store number of queries being run, make sure to run a Scrutinizer request for each query made.\r\n    let numberOfQueries = 0;\r\n    //data sent up into this list, it's returned at end.\r\n    let datatoGraph = [];\r\n    //only run a report if all options are populated, only matter when there are not adhoc filters.\r\n    this.runReport = false;\r\n    //takes the query and stores it to a variable\r\n    var query = this.buildQueryParameters(options);\r\n    //save the query to this, so it can be accessed by other methods.\r\n    this.liveQuery = query;\r\n    query.targets = query.targets.filter(t => !t.hide);\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n    //add adhoc filters to the query.\r\n    if (this.templateSrv.getAdhocFilters) {\r\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    } else {\r\n      query.adhocFilters = [];\r\n    }\r\n\r\n    let checkStart = query.targets.length - 1;\r\n    //counter is used to keep track of number of exporters. This matters for creating the filter ojects\r\n    let filterTypes = this.filterTypes.map(filter => filter[\"text\"]);\r\n    let filterObject = {\r\n      sourceIp: [],\r\n      exporterDetails: [],\r\n      exporters: [],\r\n      ports: [],\r\n      destIp: []\r\n    };\r\n    if (query.adhocFilters.length > 0) {\r\n      query.adhocFilters.forEach(filter => {\r\n        if (!filterTypes.includes(filter[\"key\"])) {\r\n          filterObject.exporters.push(filter[\"key\"]);\r\n        } else {\r\n          this.filterTypes.forEach(filterType => {\r\n            if (filterType[\"text\"] === filter[\"key\"]) {\r\n              let filterKey = filterType[\"value\"];\r\n              let filterValue = filter[\"value\"];\r\n              filterObject[filterKey].push(filterValue);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      //this exporter count is compared to the number of exporters to verify we have loops threw everything before returning.\r\n      let exporterCount = 0;\r\n      let numberofExporters = 0;\r\n\r\n      if (query.adhocFilters.length > 0) {\r\n        query.adhocFilters.forEach(filter => {\r\n          //if there is an exporter passed in the adhoc filter.\r\n          if (\r\n            filterObject.exporters.length > 0 &&\r\n            !filterTypes.includes(filter[\"key\"])\r\n          ) {\r\n           \r\n           \r\n            numberofExporters++;\r\n\r\n            //in some cases we will be passed the DNS/SNMP name of an exporter, here we convert it to an IP address needed for final filter.\r\n            \r\n            let adhocParams = makescrutJSON.findExporter(\r\n              this.scrutInfo,\r\n              filter[\"key\"]\r\n            );\r\n\r\n            this.doRequest(adhocParams).then(exporter_details => {\r\n         \r\n              let exporterIpFound\r\n              if (exporter_details.data.results.length >0){\r\n                exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n              } else if (filter['key'] === \"All Exporters\"){\r\n                exporterIpFound = \"GROUP\"\r\n              }else if (filter['key'] === \"Device Group\") {\r\n                exporterIpFound = filter\r\n              }\r\n             \r\n\r\n              //need to find the interface ID for the interface passed to Scrutinizer.\r\n              let interfaceParams = makescrutJSON.interfaceJSON(\r\n                this.scrutInfo,\r\n                exporterIpFound\r\n              );\r\n\r\n              this.doRequest(interfaceParams).then(interfaceDetails => {\r\n                let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n                //for each interface that belongs to a device, we want to compare it against the one selected in grafana. If it matched we can add it to the filters\r\n        \r\n                 if (filter[\"value\"] === \"All Interfaces\") {\r\n                  filterObject.exporterDetails.push({\r\n                    exporterName: filter[\"key\"],\r\n                    exporterIp: exporterIpFound,\r\n                    interfaceName: filter[\"value\"],\r\n                    interfaceId: \"ALL\"\r\n                  });\r\n                } else if(filter[\"key\"] === \"Device Group\"){\r\n                  filterObject.exporterDetails.push({\r\n                    exporterName: filter[\"key\"],\r\n                    exporterIp: \"GROUP\",\r\n                    interfaceName: filter[\"value\"],\r\n                    interfaceId: interfaceList[0][8]['id'].toString()\r\n                  })\r\n                }\r\n                else{\r\n                  interfaceList.forEach(exporterInterface => {\r\n                    let interfaceID = exporterInterface[5].filterDrag.searchStr;\r\n                    let interfaceName = exporterInterface[5][\"label\"];\r\n\r\n                    //if selected interface matches and interface in the list, add it to object\r\n                    if (filter[\"value\"] === interfaceName) {\r\n                      filterObject.exporterDetails.push({\r\n                        exporterName: filter[\"key\"],\r\n                        exporterIp: exporterIpFound,\r\n                        interfaceName: filter[\"value\"],\r\n                        interfaceId: interfaceID\r\n                      });\r\n                    }\r\n                  });\r\n                }\r\n\r\n                exporterCount++;\r\n                //we have now looped through all the exporters in the filters.\r\n                if (exporterCount === numberofExporters) {\r\n                 \r\n                  //created the filters we need to pass into each gadget on the dashboard.\r\n                  let reportFilter = makescrutJSON.createAdhocFilters(\r\n                    filterObject\r\n                  );\r\n   \r\n                  //run a query for each gadget on the dashboard.\r\n                  query.targets.forEach(eachQuery => {\r\n\r\n                    let scrutParams = makescrutJSON.createFilters(\r\n                      this.scrutInfo,\r\n                      options,\r\n                      reportFilter,\r\n                      eachQuery\r\n                    );\r\n\r\n                    let params = makescrutJSON.findtimeJSON(\r\n                      this.scrutInfo,\r\n                      scrutParams\r\n                    );\r\n                    //find out what interval the data is in, we need to use this later to normalize the graphs.\r\n                    this.doRequest(params).then(response => {\r\n                      let selectedInterval =\r\n                        response.data[\"report_object\"].dataGranularity.used;\r\n                      //set up JSON to go to Scrutinizer API\r\n                      let params = makescrutJSON.reportJSON(\r\n                        this.scrutInfo,\r\n                        scrutParams\r\n                      );\r\n                      //request for report data made to scrutinizer\r\n                      this.doRequest(params).then(response => {\r\n                        //data organized into how Grafana expects it.\r\n                        let formatedData = dataHandler.formatData(\r\n                          response.data,\r\n                          scrutParams,\r\n                          selectedInterval, \r\n                          query\r\n                        );\r\n\r\n                        datatoGraph.push(formatedData);\r\n                        datatoGraph = [].concat.apply([], datatoGraph);\r\n                        numberOfQueries++;\r\n                        //make sure we have gone through each query in a gadget.\r\n                        if (numberOfQueries === query.targets.length) {\r\n                          return resolve({ data: datatoGraph });\r\n                        }\r\n                      });\r\n                    });\r\n                  });\r\n                }\r\n              });\r\n            });\r\n          }\r\n          //if there is not an exporter passed in t e filter.\r\n          else if (filterObject.exporters.length === 0) {\r\n            query.targets.forEach((query, index, array) => {\r\n              let scrutParams = makescrutJSON.createParams(\r\n                this.scrutInfo,\r\n                options,\r\n                query\r\n              );\r\n              //figure out the intervale time.\r\n              let params = makescrutJSON.findtimeJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n                //store interval here.\r\n                let selectedInterval =\r\n                  response.data[\"report_object\"].dataGranularity.used;\r\n                //set up JSON to go to Scrutinizer API\r\n                this.filters = makescrutJSON.createAdhocFilters(filterObject);\r\n                //add adhoc filters to exhisting filters.\r\n                let merged = {\r\n                  ...this.filters,\r\n                  ...scrutParams[\"scrutFilters\"]\r\n                };\r\n\r\n                scrutParams.scrutFilters = merged;\r\n                let params = makescrutJSON.reportJSON(\r\n                  this.scrutInfo,\r\n                  scrutParams\r\n                );\r\n                this.doRequest(params).then(response => {\r\n                  let formatedData = dataHandler.formatData(\r\n                    response.data,\r\n                    scrutParams,\r\n                    selectedInterval,\r\n                    query\r\n                  );\r\n\r\n                  datatoGraph.push(formatedData);\r\n                  datatoGraph = [].concat.apply([], datatoGraph);\r\n\r\n                  numberOfQueries++;\r\n                  //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                  if (numberOfQueries === array.length) {\r\n                    return resolve({ data: datatoGraph });\r\n                  }\r\n                });\r\n              });\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        //else block meands you don't have any adhoc filters applied.\r\n        if (\r\n          (query.targets[checkStart].target !== undefined ||\r\n            \"Select Exporter\") &&\r\n          query.targets[checkStart].reportInterface !== \"Select Interface\" &&\r\n          query.targets[checkStart].reportDirection !== \"Select Direction\" &&\r\n          query.targets[checkStart].reportType !== \"Select Report\"\r\n        ) {\r\n          this.runReport = true;\r\n        }\r\n\r\n        //once all drop downs are selected, run the report.\r\n        if (this.runReport == true) {\r\n          \r\n          query.targets.forEach((query, index, array) => {\r\n            let scrutParams = makescrutJSON.createParams(\r\n              this.scrutInfo,\r\n              options,\r\n              query\r\n            );\r\n            //figure out the intervale time.\r\n            let params = makescrutJSON.findtimeJSON(\r\n              this.scrutInfo,\r\n              scrutParams\r\n            );\r\n            this.doRequest(params).then(response => {\r\n              //store interval here.\r\n              let selectedInterval =\r\n                response.data[\"report_object\"].dataGranularity.used;\r\n              //set up JSON to go to Scrutinizer API\r\n              let params = makescrutJSON.reportJSON(\r\n                this.scrutInfo,\r\n                scrutParams\r\n              );\r\n              this.doRequest(params).then(response => {\r\n\r\n                let formatedData = dataHandler.formatData(\r\n                  response.data,\r\n                  scrutParams,\r\n                  selectedInterval,\r\n                  query\r\n                );\r\n                \r\n                datatoGraph.push(formatedData);\r\n         \r\n                datatoGraph = [].concat.apply([], datatoGraph);\r\n                \r\n                numberOfQueries++;\r\n                //incase user has multiple queries we want to make sure we have iterated through all of them before returning results.\r\n                if (numberOfQueries === array.length) {\r\n          \r\n                  return resolve({ data: datatoGraph });\r\n                }\r\n              });\r\n            });\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    console.log(\"Running Test\");\r\n    let params = makescrutJSON.authJson(this.scrutInfo);\r\n\r\n    return this.doRequest(params).then(response => {\r\n      if (response.status === 200) {\r\n        if (response.data.details == \"invalidToken\") {\r\n          //alert if authToken is expired or invalid\r\n          return {\r\n            status: \"failed\",\r\n            message: `Check your API key, recevied back: ${response.data.err}`,\r\n            title: \"Api Key Failure\"\r\n          };\r\n        } else {\r\n          //success if everything works.\r\n          return {\r\n            status: \"success\",\r\n            message: \"Data source is working\",\r\n            title: \"Success\"\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  findInterfaces(options, scope) {\r\n    console.log(\"running find interfaces\");\r\n    let query = this.liveQuery;\r\n\r\n    if (query.targets) {\r\n      //determines which select you have clicked on.\r\n      let selectedIP = scope.ctrl.target.target;\r\n\r\n      if (selectedIP === \"deviceGroup\") {\r\n        let params = makescrutJSON.groupJSON(\r\n          this.scrutInfo[\"url\"],\r\n          this.scrutInfo[\"authToken\"]\r\n        );\r\n        \r\n        //if user selects Device Group we return a list of all groups available.\r\n        return this.doRequest(params).then(response => {\r\n          let i = 0;\r\n\r\n          let jsonData = response.data;\r\n          let data = [];\r\n          for (i = 0; i < jsonData.length; i++) {\r\n            data.push({\r\n              value: jsonData[i][\"id\"].toString(),\r\n              text: jsonData[i][\"name\"]\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      } else {\r\n        //otherwise we figre out what interfaces are available for selected device.\r\n        let interfaceThings = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          selectedIP\r\n        );\r\n\r\n        return this.doRequest(interfaceThings).then(response => {\r\n          let data = [{ text: \"All Interfaces\", value: \"allInterfaces\" }];\r\n          let i = 0;\r\n          let jsonData = response.data;\r\n\r\n          for (i = 0; i < jsonData.rows.length; i++) {\r\n            data.push({\r\n              value: jsonData.rows[i][5].filterDrag.searchStr,\r\n              text: jsonData.rows[i][5].label\r\n            });\r\n          }\r\n\r\n          return data;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  applyFilter(scope, refresh) {\r\n    console.log(\"running apply filters\");\r\n    this.filters = scope.ctrl.target.filters;\r\n    refresh.refresh();\r\n  }\r\n\r\n  //gets all exporters available. Will use DNS resolve by default and fail back to IP of exporter.\r\n  getExporters() {\r\n    console.log(\"running get exporters\");\r\n    return this.exporters;\r\n  }\r\n\r\n  exporterList() {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\", value: \"allExporters\" },\r\n        { text: \"Device Group\", value: \"deviceGroup\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return exporterList;\r\n    });\r\n  }\r\n\r\n  doRequest(options) {\r\n    options.withCredentials = this.withCredentials;\r\n    options.headers = this.headers;\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  //function from simplejsondatasource, used to take values from drop downs and add to query.\r\n  //When adding a new dropdown you need to update this function.\r\n  buildQueryParameters(options) {\r\n    options.targets = _.filter(options.targets, target => {\r\n      return target.target !== \"select metric\";\r\n    });\r\n\r\n    var targets = _.map(options.targets, target => {\r\n\r\n      return {\r\n        target: this.templateSrv.replace(\r\n          target.target,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n        refId: target.refId,\r\n        hide: target.hide,\r\n        type: target.type || \"timeserie\",\r\n\r\n        reportType: this.templateSrv.replace(\r\n          target.report,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDirection: this.templateSrv.replace(\r\n          target.direction,\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportInterface: this.templateSrv.replace(\r\n          target.interface || \"Select Interface\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportFilters: this.templateSrv.replace(\r\n          target.filters || \"No Filter\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDisplay: this.templateSrv.replace(\r\n          target.display || \"No Display\",\r\n          options.scopedVars,\r\n          \"regex\"\r\n        ),\r\n\r\n        reportDNS: target.dns\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  //used to figure out which interfaces to show for a paritcular exporter.\r\n  HandleAdhocFilters(resolve, options) {\r\n    if (options.key !=\"Device Group\"){\r\n      let exporterParams = makescrutJSON.findExporter(\r\n        this.scrutInfo,\r\n        options.key\r\n      );\r\n      let interfaces = [{ text: \"All Interfaces\" }];\r\n\r\n      this.doRequest(exporterParams).then(exporterResults => {\r\n        let exporterIp = exporterResults[\"data\"][\"results\"][0][\"exporter_ip\"];\r\n        let interfaceParams = makescrutJSON.interfaceJSON(\r\n          this.scrutInfo,\r\n          exporterIp\r\n        );\r\n\r\n        this.doRequest(interfaceParams).then(interfaceDetails => {\r\n          let interfaceList = interfaceDetails[\"data\"][\"rows\"];\r\n\r\n          for (let k = 0; k < interfaceList.length; k++) {\r\n            let interfaceName = interfaceList[k][5][\"label\"];\r\n            interfaces.push({\r\n              text: interfaceName\r\n            });\r\n          }\r\n          return resolve(interfaces);\r\n        });\r\n      });\r\n    \r\n    }\r\n    else {\r\n      let params = makescrutJSON.groupJSON(\r\n        this.scrutInfo['url'],\r\n        this.scrutInfo[\"authToken\"]\r\n      );\r\n\r\n     //if user selects Device Group we return a list of all groups available.\r\n      this.doRequest(params).then(response => {\r\n        let i = 0;\r\n\r\n        let jsonData = response.data;\r\n        let data = [];\r\n        for (i = 0; i < jsonData.length; i++) {\r\n          data.push({\r\n            value: jsonData[i][\"id\"].toString(),\r\n            text: jsonData[i][\"name\"]\r\n          });\r\n        }\r\n\r\n        return resolve(data);\r\n    })}\r\n    \r\n  }\r\n\r\n  addInterfaces(exporterName) {\r\n    //if key is exporter there is no AND, we know we are looking for interfaces on that exporter.\r\n    let interfaces = [];\r\n    let exporterToSearch = exporterName;\r\n    let adhocParams = makescrutJSON.findExporter(\r\n      this.scrutInfo,\r\n      exporterToSearch\r\n    );\r\n    this.doRequest(adhocParams).then(exporter_details => {\r\n      let exporterIpFound = exporter_details.data.results[0].exporter_ip;\r\n      let interfacesToSearch = makescrutJSON.interfaceJSON(\r\n        this.scrutInfo,\r\n        exporterIpFound\r\n      );\r\n      this.doRequest(interfacesToSearch).then(interfaceDetails => {\r\n        let i = 0;\r\n        let interfaceJson = interfaceDetails.data;\r\n\r\n        if (interfaces.length > 0) {\r\n          interfaces = [];\r\n        }\r\n        for (i = 0; i < interfaceJson.rows.length; i++) {\r\n          //add interfaces to the interface filter options\r\n          interfaces.push(interfaceJson.rows[i][5].label);\r\n        }\r\n\r\n        return resolve(interfaces);\r\n      });\r\n    });\r\n  }\r\n  presentOptions(resolve) {\r\n    let params = makescrutJSON.exporterJSON(this.scrutInfo);\r\n    return this.doRequest(params).then(response => {\r\n      let exporterList = [\r\n        { text: \"All Exporters\" },\r\n        { text: \"Device Group\" },\r\n        { text: \"Source IP Filter\" },\r\n        { text: \"Add Port Filter\" },\r\n        { text: \"Destination IP Filter\" }\r\n      ];\r\n      for (let i = 0; i < response.data.length; i++) {\r\n        exporterList.push({\r\n          text: response.data[i][\"name\"],\r\n          value: response.data[i][\"ip\"]\r\n        });\r\n      }\r\n\r\n      this.exporters = exporterList;\r\n      return resolve(exporterList);\r\n    });\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    return new Promise((resolve, reject) => {\r\n      this.presentOptions(resolve);\r\n    });\r\n  }\r\n\r\n  getTagValues(options) {\r\n    console.log(\"getting tag values\");\r\n  \r\n    switch (options.key) {\r\n      case \"Source IP Filter\":\r\n        return new Promise((resolve, reject) => {\r\n          resolve();\r\n        });\r\n      case \"Destination IP Filter\":\r\n            return new Promise((resolve, reject) => {\r\n              resolve();\r\n            });\r\n      case \"Add Port Filter\":\r\n            return new Promise((resolve, reject) => {\r\n              resolve();\r\n            });\r\n      case \"All Exporters\":\r\n          return new Promise((resolve, reject) => {\r\n            resolve([{'text':'All Interfaces',\r\n                      'value':'All Interfaces'}]);\r\n          });\r\n      default:\r\n        return new Promise((resolve, reject) => {\r\n          this.HandleAdhocFilters(resolve, options);\r\n        });\r\n    }\r\n  }\r\n}\r\n"]}